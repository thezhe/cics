#!/usr/bin/env sh
## Strict mode
set -eu
IFS="$(printf "\n\t")"
readonly IFS
## Prologue
if ! command -v podman >/dev/null 2>&1; then
    echo 'ERROR: Missing required command '\''podman'\'''
    exit 1
fi
cics_script_path="$(
    script_directory="$(dirname -- "${0}")"
    cd -- "${script_directory}" >/dev/null 2>&1
    pwd -P
)"
cics_shebang='#!/usr/bin/env -S cics run'
readonly cics_shebang cics_script_path PWD
## Help
cics_print_help() {
    printf 'Cics Installs Container Shims\n\nUsage:\n    %-40s\n\nCommands:\n    %-40s\n    %-40s\n    %-40s\n    %-40s\n    %-40s\n\nExamples:\n    %-40s%-40s\n    %-40s%-40s\n\nRun '\''cics COMMAND --help'\'' for more information on a command\n' \
        'cics [-h, --help] COMMAND' \
        'install' 'list' 'run' 'uninstall' 'upgrade' \
        'cics install ghcr.io/hadolint/hadolint' '# Install hadolint shim' 'hadolint -v' '# Run shim without access to parent directories or ports'
}
cics_print_install_help() {
    printf 'Pull one or more images and install their shims\n\nUsage:\n     %-40s\n' 'cics install image...'
}
cics_print_list_help() {
    printf 'List installed shims\n\nUsage:\n     %-40s\n' 'cics list'
}
cics_print_run_help() {
    printf 'Manually run a shim\n\nUsage:\n     %-40s\n' 'cics run SHIM'
}
cics_print_uninstall_help() {
    printf 'Uninstall one or more shims\n\nUsage:\n     %-40s\n' 'cics uninstall SHIM...'
}
cics_print_upgrade_help() {
    printf 'Pull all shim images\n\nUsage:\n     %-40s\n' 'cics upgrade'
}
## CLI
if [ 0 -eq "${#}" ]; then
    cics_print_help
    exit 1
fi
cics_command="${1}"
readonly cics_command
case "${cics_command}" in
    -h | --help)
        cics_print_help
        exit 0
        ;;
    *) ;;
esac
if [ 1 -lt "${#}" ]; then
    case "${2}" in
        -h | --help)
            case "${cics_command}" in
                install)
                    cics_print_install_help
                    ;;
                list)
                    cics_print_list_help
                    ;;
                run)
                    cics_print_run_help
                    ;;
                uninstall)
                    cics_print_uninstall_help
                    ;;
                upgrade)
                    cics_print_upgrade_help
                    ;;
                *)
                    cics_print_help
                    exit 1
                    ;;
            esac
            exit 0
            ;;
        *) ;;
    esac
fi
shift
## Commands
# cics_list
cics_list() {
    (
        if [ 0 -ne "${#}" ]; then
            cics_print_list_help
            exit 1
        fi

        for filename in "${cics_script_path}/"*; do
            if [ -f "${filename}" ] && head -n 1 "${filename}" | grep -q "^${cics_shebang}\$"; then
                basename "${filename}"
            fi
        done
    )
}
# cics_upgrade
cics_upgrade() {
    (
        if [ 0 -ne "${#}" ]; then
            cics_print_upgrade_help
            exit 1
        fi

        for filename in "${cics_script_path}/"*; do
            if [ -f "${filename}" ] && head -n 1 "${filename}" | grep -q "^${cics_shebang}\$"; then
                image="$(tail -n 1 "${filename}")"
                podman pull "${image}"
            fi
        done
    )
}
# cics_install IMAGE...
cics_install() {
    (
        if [ 0 -eq "${#}" ]; then
            cics_print_install_help
            exit 1
        fi

        installed_shims="$(cics_list)"
        readonly installed_shims

        for arg in "${@}"; do
            entrypoint="${arg##*/}"
            entrypoint="${entrypoint%%:*}"

            if echo "${installed_shims}" | grep -q "^${entrypoint}\$"; then
                echo "ERROR: '${entrypoint}' is already installed. Reinstall to change container repository and/or tag."
                exit 1
            fi

            podman pull "${arg}"
        done

        for arg in "${@}"; do
            entrypoint="${arg##*/}"
            entrypoint="${entrypoint%%:*}"

            install_target="${cics_script_path}/${entrypoint}"
            printf '%s\n%s\n' "${cics_shebang}" "${arg}" >"${install_target}"
            chmod +x "${install_target}"
        done
    )
}
# cics_run SHIM
cics_run() {
    (
        if [ 0 -eq "${#}" ]; then
            cics_print_run_help
            exit 1
        fi

        image="$(tail -n 1 "${1}")"
        entrypoint="${image##*/}"
        entrypoint="${entrypoint%%:*}"
        if [ -z "${entrypoint}" ]; then
            exit 1
        fi
        readonly entrypoint image
        shift

        for arg in "${@}"; do
            command_arg="$(echo "${arg}" | sed -e "s|${PWD}|/mnt|")"
            set -- "${@}" "${command_arg}"
            shift
        done

        # See below for option justifications
        # https://github.com/hadolint/hadolint/issues/743
        podman run -iq --rm --entrypoint "${entrypoint}" --env 'HOME=/' -v "${PWD}:/mnt" -w /mnt "${image}" "${@}"
    )
}
# cics_uninstall SHIM...
cics_uninstall() {
    (
        if [ 0 -eq "${#}" ]; then
            cics_print_uninstall_help
            exit 1
        fi

        installed_shims="$(cics_list)"
        readonly installed_shims

        for arg in "${@}"; do
            if ! echo "${installed_shims}" | grep -q "^${arg}\$"; then
                echo "ERROR: ${arg} is not installed"
                exit 1
            fi
            set -- "${@}" "${cics_script_path}/${arg}"
            shift
        done

        rm -f -- "${@}"
    )
}
case "${cics_command}" in
    install)
        cics_install "${@}"
        ;;
    list)
        cics_list "${@}"
        ;;
    run)
        cics_run "${@}"
        ;;
    uninstall)
        cics_uninstall "${@}"
        ;;
    upgrade)
        cics_upgrade "${@}"
        ;;
    *)
        cics_print_help
        exit 1
        ;;
esac
exit 0
